const HL = { js: { k: /\b(abstract|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|function|if|implements|import|in|instanceof|interface|let|new|null|package|private|protected|public|return|super|switch|this|throw|try|typeof|var|void|while|with|yield|async)\b/g, c: /\/\*[\s\S]*?\*\/|\/\/.*$/gm, s: /'(?:\\'|[^'])*'|\"(?:\\\"|[^\"])*\"|`(?:\\`|[^`])*`/g, n: /\b\d+(?:\.\d+)?\b/g, f: /\b([A-Za-z_][\w$]*)(?=\s*\()/g }, py: { k: /\b(and|as|assert|async|await|break|class|continue|def|del|elif|else|except|False|finally|for|from|global|if|import|in|is|lambda|None|nonlocal|not|or|pass|raise|return|True|try|while|with|yield)\b/g, c: /#.*/g, s: /'''[\s\S]*?'''|\"\"\"[\s\S]*?\"\"\"|'(?:\\'|[^'])*'|\"(?:\\\"|[^\"])*\"/g, n: /\b\d+(?:\.\d+)?\b/g, f: /\b([A-Za-z_][\w]*)\s*(?=\()/g }, bash: { k: /\b(if|then|fi|elif|else|for|in|do|done|case|esac|function|select|until|while)\b/g, c: /#.*/g, s: /'[^']*'|\"[^\"]*\"/g, n: /\b\d+\b/g, f: /\b([A-Za-z_][\w-]*)\s*(?=\()/g }, json: { k: /(true|false|null)/g, c: /(?!x)x/g, s: /\"(?:\\\"|[^\"])*\"/g, n: /-?\b\d+(?:\.\d+)?\b/g, f: /(?!x)x/g }, css: { k: /\b(display|grid|flex|block|none|absolute|relative|color|background|border|padding|margin|font|position|content)\b/g, c: /\/\*[\s\S]*?\*\//g, s: /\"[^\"]*\"|'[^']*'/g, n: /\b\d+(px|em|rem|%)\b/g, f: /(?!x)x/g }, html: { k: /<\/?\w+[^>]*>/g, c: /(?!x)x/g, s: /\"[^\"]*\"|'[^']*'/g, n: /\b\d+\b/g, f: /(?!x)x/g } };
function esc(s) { return s.replace(/[&<>]/g, m => ({ '&': '&amp;', '<': '&lt;', '>': '&gt;' }[m])); }
export function highlightAll(root = document) { root.querySelectorAll('pre code').forEach(codeEl => { const lang = (codeEl.className.match(/lang-([\w-]+)/) || [])[1] || 'js'; const L = HL[lang] || HL.js; let s = codeEl.textContent; s = s.replace(L.c, m => `<span class='tok-c'>${esc(m)}</span>`); s = s.replace(L.s, m => `<span class='tok-s'>${esc(m)}</span>`); s = s.replace(L.k, m => `<span class='tok-k'>${m}</span>`); s = s.replace(L.n, m => `<span class='tok-n'>${m}</span>`); s = s.replace(L.f, (m, p1) => `<span class='tok-f'>${p1}</span>`); codeEl.innerHTML = s; }); }